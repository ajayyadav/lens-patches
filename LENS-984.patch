From 06e3feb9b5537d2b46f1427eaaac345fa5cb867c Mon Sep 17 00:00:00 2001
From: Ajay Yadava <ajaynsit@gmail.com>
Date: Sat, 26 Mar 2016 11:39:21 +0530
Subject: [PATCH] LENS-984

---
 .../apache/lens/cli/commands/LensQueryCommands.java    | 18 +++++++++++++++---
 .../main/java/org/apache/lens/client/LensClient.java   |  5 +++--
 .../java/org/apache/lens/client/LensStatement.java     | 17 ++++++++++-------
 .../apache/lens/server/query/QueryServiceResource.java | 13 ++++++++++---
 4 files changed, 38 insertions(+), 15 deletions(-)

diff --git a/lens-cli/src/main/java/org/apache/lens/cli/commands/LensQueryCommands.java b/lens-cli/src/main/java/org/apache/lens/cli/commands/LensQueryCommands.java
index 2c7b17f..6649f9d 100644
--- a/lens-cli/src/main/java/org/apache/lens/cli/commands/LensQueryCommands.java
+++ b/lens-cli/src/main/java/org/apache/lens/cli/commands/LensQueryCommands.java
@@ -435,10 +435,22 @@ public class LensQueryCommands extends BaseLensCommand {
     @CliOption(key = {"", "prepare_handle"}, mandatory = true, help = "Prepare handle to execute") String phandle,
     @CliOption(key = {"async"}, mandatory = false, unspecifiedDefaultValue = "false",
       specifiedDefaultValue = "true", help = "<async>") boolean async,
-    @CliOption(key = {"name"}, mandatory = false, help = "<query-name>") String queryName) {
+    @CliOption(key = {"name"}, mandatory = false, help = "<query-name>") String queryName) throws LensAPIException {
+    PrettyPrintable cliOutput;
     if (async) {
-      QueryHandle handle = getClient().executePrepared(QueryPrepareHandle.fromString(phandle), queryName);
-      return handle.getHandleId().toString();
+      try{
+        QueryHandle handle = getClient().executePrepared(QueryPrepareHandle.fromString(phandle), queryName);
+        return handle.getHandleId().toString();
+      } catch (final LensAPIException e) {
+
+        BriefError briefError = new BriefError(e.getLensAPIErrorCode(), e.getLensAPIErrorMessage());
+        cliOutput = new IdBriefErrorTemplate(IdBriefErrorTemplateKey.REQUEST_ID, e.getLensAPIRequestId(), briefError);
+
+      } catch (final LensBriefErrorException e) {
+        cliOutput = e.getIdBriefErrorTemplate();
+      }
+      return cliOutput.toPrettyString();
+
     } else {
       try {
         LensClient.LensClientResultSetWithStats result = getClient().getResultsFromPrepared(
diff --git a/lens-client/src/main/java/org/apache/lens/client/LensClient.java b/lens-client/src/main/java/org/apache/lens/client/LensClient.java
index ea0cd76..0d6525a 100644
--- a/lens-client/src/main/java/org/apache/lens/client/LensClient.java
+++ b/lens-client/src/main/java/org/apache/lens/client/LensClient.java
@@ -592,12 +592,13 @@ public class LensClient {
     return statement.getPreparedQuery(phandle);
   }
 
-  public LensClientResultSetWithStats getResultsFromPrepared(QueryPrepareHandle phandle, String queryName) {
+  public LensClientResultSetWithStats getResultsFromPrepared(QueryPrepareHandle phandle,
+                                                             String queryName) throws LensAPIException {
     QueryHandle qh = statement.executeQuery(phandle, true, queryName);
     return getResultsFromHandle(qh, true);
   }
 
-  public QueryHandle executePrepared(QueryPrepareHandle phandle, String queryName) {
+  public QueryHandle executePrepared(QueryPrepareHandle phandle, String queryName) throws LensAPIException {
     return statement.executeQuery(phandle, false, queryName);
   }
 
diff --git a/lens-client/src/main/java/org/apache/lens/client/LensStatement.java b/lens-client/src/main/java/org/apache/lens/client/LensStatement.java
index 33c26e1..1abe84b 100644
--- a/lens-client/src/main/java/org/apache/lens/client/LensStatement.java
+++ b/lens-client/src/main/java/org/apache/lens/client/LensStatement.java
@@ -109,8 +109,9 @@ public class LensStatement {
    * @param queryName              the query name
    * @return the query handle
    */
-  public QueryHandle executeQuery(QueryPrepareHandle phandle, boolean waitForQueryToComplete, String queryName) {
-    QueryHandle handle = executeQuery(phandle, queryName);
+  public QueryHandle executeQuery(QueryPrepareHandle phandle, boolean waitForQueryToComplete,
+                                  String queryName) throws LensAPIException {
+    QueryHandle handle = executeQuery(phandle, queryName).getData();
 
     if (waitForQueryToComplete) {
       waitForQueryToComplete(handle);
@@ -328,9 +329,9 @@ public class LensStatement {
    * @param queryName the query name
    * @return the query handle
    */
-  public QueryHandle executeQuery(QueryPrepareHandle phandle, String queryName) {
+  public LensAPIResult<QueryHandle> executeQuery(QueryPrepareHandle phandle, String queryName) throws LensAPIException {
     if (!connection.isOpen()) {
-      throw new IllegalStateException("Lens Connection has to be " + "established before querying");
+      throw new IllegalStateException("Lens Connection has to be established before querying");
     }
 
     Client client = connection.buildClient();
@@ -343,10 +344,12 @@ public class LensStatement {
       : queryName));
     mp.bodyPart(new FormDataBodyPart(FormDataContentDisposition.name("conf").fileName("conf").build(), new LensConf(),
       MediaType.APPLICATION_XML_TYPE));
-    QueryHandle handle = target.request()
-      .post(Entity.entity(mp, MediaType.MULTIPART_FORM_DATA_TYPE), QueryHandle.class);
+    Response response = target.request().post(Entity.entity(mp, MediaType.MULTIPART_FORM_DATA_TYPE));
+    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
+      return response.readEntity(new GenericType<LensAPIResult<QueryHandle>>() {});
+    }
 
-    return handle;
+    throw new LensAPIException(response.readEntity(LensAPIResult.class));
   }
 
   /**
diff --git a/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java b/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java
index a043550..6296bb3 100644
--- a/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java
+++ b/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java
@@ -658,12 +658,14 @@ public class QueryServiceResource {
   @Consumes({MediaType.MULTIPART_FORM_DATA})
   @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})
   @MultiPurposeResource(formParamName = "operation")
-  public QuerySubmitResult executePrepared(@FormDataParam("sessionid") LensSessionHandle sessionid,
+  public LensAPIResult<QuerySubmitResult> executePrepared(@FormDataParam("sessionid") LensSessionHandle sessionid,
     @PathParam("prepareHandle") String prepareHandle,
     @DefaultValue("EXECUTE") @FormDataParam("operation") String operation, @FormDataParam("conf") LensConf conf,
     @DefaultValue("30000") @FormDataParam("timeoutmillis") Long timeoutmillis,
     @DefaultValue("") @FormDataParam("queryName") String queryName) {
+    final String requestId = this.logSegregationContext.getLogSegragationId();
     checkSessionId(sessionid);
+    QuerySubmitResult result;
     try {
       SubmitOp sop = null;
       try {
@@ -671,17 +673,22 @@ public class QueryServiceResource {
       } catch (IllegalArgumentException e) {
         log.warn("illegal argument for submit operation: " + operation, e);
       }
+
       if (sop == null) {
         throw new BadRequestException("Invalid operation type: " + operation + submitPreparedClue);
       }
       switch (sop) {
       case EXECUTE:
-        return queryServer.executePrepareAsync(sessionid, getPrepareHandle(prepareHandle), conf, queryName);
+        result = queryServer.executePrepareAsync(sessionid, getPrepareHandle(prepareHandle), conf, queryName);
+        break;
       case EXECUTE_WITH_TIMEOUT:
-        return queryServer.executePrepare(sessionid, getPrepareHandle(prepareHandle), timeoutmillis, conf, queryName);
+        result = queryServer.executePrepare(sessionid, getPrepareHandle(prepareHandle), timeoutmillis, conf, queryName);
+        break;
       default:
         throw new BadRequestException("Invalid operation type: " + operation + submitPreparedClue);
       }
+
+      return LensAPIResult.composedOf(null, requestId, result);
     } catch (LensException e) {
       throw new WebApplicationException(e);
     }
-- 
1.9.1

