From ea12c24d36ed250aed0d50c35c4a3c643668f13f Mon Sep 17 00:00:00 2001
From: Ajay Yadava <ajaynsit@gmail.com>
Date: Mon, 28 Mar 2016 16:01:26 +0530
Subject: [PATCH] LENS42

---
 .../server/api/query/QueryExecutionService.java    |  4 ++--
 .../apache/lens/server/query/LensServerDAO.java    | 25 +++++-----------------
 .../server/query/QueryExecutionServiceImpl.java    | 25 +++++++++++++++-------
 .../lens/server/query/QueryServiceResource.java    | 12 +++++------
 .../lens/server/ui/QueryServiceUIResource.java     |  2 +-
 .../org/apache/lens/server/query/TestLensDAO.java  | 13 +++++------
 6 files changed, 38 insertions(+), 43 deletions(-)

diff --git a/lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryExecutionService.java b/lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryExecutionService.java
index 15ed222..f31e82c 100644
--- a/lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryExecutionService.java
+++ b/lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryExecutionService.java
@@ -232,10 +232,10 @@ public interface QueryExecutionService {
    * @param queryName     return queries containing the query name. If null, all queries will be returned
    * @param fromDate      start date of time range interval
    * @param toDate        end date of the time range interval
-   * @return List of query handles
+   * @return List of queries
    * @throws LensException the lens exception
    */
-  List<QueryHandle> getAllQueries(LensSessionHandle sessionHandle, String state, String user, String driver,
+  List<LensQuery> getAllQueries(LensSessionHandle sessionHandle, String state, String user, String driver,
     String queryName, long fromDate, long toDate) throws LensException;
 
   /**
diff --git a/lens-server/src/main/java/org/apache/lens/server/query/LensServerDAO.java b/lens-server/src/main/java/org/apache/lens/server/query/LensServerDAO.java
index 1d6125c..126259a 100644
--- a/lens-server/src/main/java/org/apache/lens/server/query/LensServerDAO.java
+++ b/lens-server/src/main/java/org/apache/lens/server/query/LensServerDAO.java
@@ -19,14 +19,12 @@
 package org.apache.lens.server.query;
 
 import java.sql.Connection;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
 
 import javax.sql.DataSource;
 
-import org.apache.lens.api.query.QueryHandle;
 import org.apache.lens.server.api.error.LensException;
 import org.apache.lens.server.api.query.FinishedLensQuery;
 import org.apache.lens.server.util.UtilityMethods;
@@ -35,6 +33,7 @@ import org.apache.commons.dbutils.DbUtils;
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.dbutils.ResultSetHandler;
 import org.apache.commons.dbutils.handlers.BeanHandler;
+import org.apache.commons.dbutils.handlers.BeanListHandler;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 
@@ -165,11 +164,11 @@ public class LensServerDAO {
    * @return the list
    * @throws LensException the lens exception
    */
-  public List<QueryHandle> findFinishedQueries(String state, String user, String driverName, String queryName,
-    long fromDate, long toDate) throws LensException {
+  public List<FinishedLensQuery> findFinishedQueries(String state, String user, String driverName, String queryName,
+                                             long fromDate, long toDate) throws LensException {
     boolean addFilter = StringUtils.isNotBlank(state) || StringUtils.isNotBlank(user)
       || StringUtils.isNotBlank(queryName);
-    StringBuilder builder = new StringBuilder("SELECT handle FROM finished_queries");
+    StringBuilder builder = new StringBuilder("SELECT * FROM finished_queries");
     List<Object> params = null;
     if (addFilter) {
       builder.append(" WHERE ");
@@ -202,21 +201,7 @@ public class LensServerDAO {
       builder.append(StringUtils.join(filters, " AND "));
     }
 
-    ResultSetHandler<List<QueryHandle>> resultSetHandler = new ResultSetHandler<List<QueryHandle>>() {
-      @Override
-      public List<QueryHandle> handle(ResultSet resultSet) throws SQLException {
-        List<QueryHandle> queryHandleList = new ArrayList<QueryHandle>();
-        while (resultSet.next()) {
-          String handle = resultSet.getString(1);
-          try {
-            queryHandleList.add(QueryHandle.fromString(handle));
-          } catch (IllegalArgumentException exc) {
-            log.warn("Warning invalid query handle found in DB " + handle);
-          }
-        }
-        return queryHandleList;
-      }
-    };
+    ResultSetHandler<List<FinishedLensQuery>> resultSetHandler = new BeanListHandler<>(FinishedLensQuery.class);
 
     QueryRunner runner = new QueryRunner(ds);
     String query = builder.toString();
diff --git a/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java b/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java
index 90c25e4..b616e98 100644
--- a/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java
+++ b/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java
@@ -87,7 +87,6 @@ import org.slf4j.LoggerFactory;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
-
 import lombok.*;
 import lombok.extern.slf4j.Slf4j;
 
@@ -2228,7 +2227,7 @@ public class QueryExecutionServiceImpl extends BaseLensService implements QueryE
    * java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, long)
    */
   @Override
-  public List<QueryHandle> getAllQueries(LensSessionHandle sessionHandle, String state, String userName, String driver,
+  public List<LensQuery> getAllQueries(LensSessionHandle sessionHandle, String state, String userName, String driver,
     String queryName, long fromDate, long toDate) throws LensException {
     validateTimeRange(fromDate, toDate);
     userName = UtilityMethods.removeDomain(userName);
@@ -2249,11 +2248,15 @@ public class QueryExecutionServiceImpl extends BaseLensService implements QueryE
       }
       boolean filterByDriver = StringUtils.isNotBlank(driver);
 
-      List<QueryHandle> all = new ArrayList<QueryHandle>(allQueries.keySet());
-      Iterator<QueryHandle> itr = all.iterator();
+      List<LensQuery> all = new ArrayList<>();
+      for (QueryHandle handle : allQueries.keySet()) {
+        all.add(allQueries.get(handle).toLensQuery());
+      }
+
+      Iterator<LensQuery> itr = all.iterator();
       while (itr.hasNext()) {
-        QueryHandle q = itr.next();
-        QueryContext context = allQueries.get(q);
+        LensQuery q = itr.next();
+        QueryContext context = allQueries.get(q.getQueryHandle());
         long querySubmitTime = context.getSubmissionTime();
         if ((filterByStatus && status != context.getStatus().getStatus())
           || (filterByQueryName && !context.getQueryName().toLowerCase().contains(queryName))
@@ -2269,11 +2272,17 @@ public class QueryExecutionServiceImpl extends BaseLensService implements QueryE
         if ("all".equalsIgnoreCase(userName)) {
           userName = null;
         }
-        List<QueryHandle> persistedQueries = lensServerDao.findFinishedQueries(state, userName, driver, queryName,
+        List<FinishedLensQuery> persistedQueries = lensServerDao.findFinishedQueries(state, userName, driver, queryName,
           fromDate, toDate);
         if (persistedQueries != null && !persistedQueries.isEmpty()) {
           log.info("Adding persisted queries {}", persistedQueries.size());
-          all.addAll(persistedQueries);
+          // convert finished queries to LensQueries
+          LensQuery query;
+          for (FinishedLensQuery fq : persistedQueries) {
+            QueryHandle handle = QueryHandle.fromString(fq.getHandle());
+            query = getQueryContextOfFinishedQuery(handle).toLensQuery();
+            all.add(query);
+          }
         }
       }
 
diff --git a/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java b/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java
index a043550..cfb1765 100644
--- a/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java
+++ b/lens-server/src/main/java/org/apache/lens/server/query/QueryServiceResource.java
@@ -148,12 +148,12 @@ public class QueryServiceResource {
    * @param driver    Get queries submitted on a specific driver.
    * @param fromDate  from date to search queries in a time range, the range is inclusive(submitTime &gt;= fromDate)
    * @param toDate    to date to search queries in a time range, the range is inclusive(toDate &gt;= submitTime)
-   * @return List of {@link QueryHandle} objects
+   * @return List of {@link LensQuery} objects
    */
   @GET
   @Path("queries")
   @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})
-  public List<QueryHandle> getAllQueries(@QueryParam("sessionid") LensSessionHandle sessionid,
+  public List<LensQuery> getAllQueries(@QueryParam("sessionid") LensSessionHandle sessionid,
     @DefaultValue("") @QueryParam("state") String state, @DefaultValue("") @QueryParam("queryName") String queryName,
     @DefaultValue("") @QueryParam("user") String user, @DefaultValue("") @QueryParam("driver") String driver,
     @DefaultValue("-1") @QueryParam("fromDate") long fromDate, @DefaultValue("-1") @QueryParam("toDate") long toDate) {
@@ -274,13 +274,13 @@ public class QueryServiceResource {
     @DefaultValue("-1") @QueryParam("fromDate") long fromDate, @DefaultValue("-1") @QueryParam("toDate") long toDate) {
     checkSessionId(sessionid);
     int numCancelled = 0;
-    List<QueryHandle> handles = null;
+    List<LensQuery> handles = null;
     boolean failed = false;
     try {
-      handles = getAllQueries(sessionid, state, queryName, user, driver, fromDate,
+      handles = queryServer.getAllQueries(sessionid, state, queryName, user, driver, fromDate,
         toDate == -1L ? Long.MAX_VALUE : toDate);
-      for (QueryHandle handle : handles) {
-        if (cancelQuery(sessionid, handle)) {
+      for (LensQuery query : handles) {
+        if (cancelQuery(sessionid, query.getQueryHandle())) {
           numCancelled++;
         }
       }
diff --git a/lens-server/src/main/java/org/apache/lens/server/ui/QueryServiceUIResource.java b/lens-server/src/main/java/org/apache/lens/server/ui/QueryServiceUIResource.java
index 304dc8e..df5d962 100644
--- a/lens-server/src/main/java/org/apache/lens/server/ui/QueryServiceUIResource.java
+++ b/lens-server/src/main/java/org/apache/lens/server/ui/QueryServiceUIResource.java
@@ -115,7 +115,7 @@ public class QueryServiceUIResource {
   @GET
   @Path("queries")
   @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})
-  public List<QueryHandle> getAllQueries(@QueryParam("publicId") UUID publicId,
+  public List<LensQuery> getAllQueries(@QueryParam("publicId") UUID publicId,
     @DefaultValue("") @QueryParam("state") String state, @DefaultValue("") @QueryParam("user") String user,
     @DefaultValue("") @QueryParam("driver") String driver, @DefaultValue("") @QueryParam("queryName") String queryName,
     @DefaultValue("-1") @QueryParam("fromDate") long fromDate, @DefaultValue("-1") @QueryParam("toDate") long toDate) {
diff --git a/lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java b/lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java
index 7679a06..4e19cda 100644
--- a/lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java
+++ b/lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java
@@ -127,10 +127,11 @@ public class TestLensDAO {
     // Test find finished queries
     LensSessionHandle session = service.openSession("foo@localhost", "bar", new HashMap<String, String>());
 
-    List<QueryHandle> persistedHandles = service.lensServerDao.findFinishedQueries(null, null, null, null,
+    List<FinishedLensQuery> persistedHandles = service.lensServerDao.findFinishedQueries(null, null, null, null,
       submissionTime, System.currentTimeMillis());
     if (persistedHandles != null) {
-      for (QueryHandle handle : persistedHandles) {
+      for (FinishedLensQuery finishedQuery : persistedHandles) {
+        QueryHandle handle = QueryHandle.fromString(finishedQuery.getHandle());
         LensQuery query = service.getQuery(session, handle);
         if (!handle.getHandleId().toString().equals(finishedHandle)) {
           Assert.assertTrue(query.getStatus().finished(), query.getQueryHandle() + " STATUS="
@@ -140,11 +141,11 @@ public class TestLensDAO {
     }
 
     System.out.println("@@ State = " + queryContext.getStatus().getStatus().name());
-    List<QueryHandle> daoTestQueryHandles = service.lensServerDao.findFinishedQueries(finishedLensQuery.getStatus(),
-        queryContext.getSubmittedUser(), queryContext.getSelectedDriver().getFullyQualifiedName(), "daotestquery1", -1L,
-      Long.MAX_VALUE);
+    List<FinishedLensQuery> daoTestQueryHandles = service.lensServerDao.findFinishedQueries(
+      finishedLensQuery.getStatus(), queryContext.getSubmittedUser(),
+      queryContext.getSelectedDriver().getFullyQualifiedName(), "daotestquery1", -1L, Long.MAX_VALUE);
     Assert.assertEquals(daoTestQueryHandles.size(), 1);
-    Assert.assertEquals(daoTestQueryHandles.get(0).getHandleId().toString(), finishedHandle);
+    Assert.assertEquals(daoTestQueryHandles.get(0).getHandle(), finishedHandle);
     service.closeSession(session);
   }
 }
-- 
2.1.0

